@startuml

title WP5 - Runtime Layer Architecture Overview

interface "SemanticReasonerAPI" as sem

package "Orchestrator" as orch {
    component [Orchestrator] as orch_impl
    interface "OrchestratorAPI" <<REST>> as orch_if
    component [OS driver] as os_driver
    component [K8S driver] as k8s_driver
    component [Torque driver] as torque_driver
}

package "Monitoring" as mon {
    [Monitoring] as mon_impl
    () "MonitoringAPI" <<REST>> as mon_if
    [Exporter] as exp
    () "ExporterAPI" <<REST>> as exp_if
}

package "Refactoring" as refactor {
    interface "RefactoringAPI" <<REST>> as ref_if
    component [Deployment Refactorer] as ref_depl
    component [Refactoring Option Discoverer] as ref_opt
    component [Node Manager] as ref_node
}

cloud {
    node OpenStack
    node Kubernetes as K8S
    node Torque
}

() "DeploymentPreparationAPI" as depl_prep
() "ImageRegistryAPI" as image_reg

[SODALITE\nIDE] as ide

orch_impl - orch_if

mon_impl - mon_if
exp - exp_if
mon_impl ..> exp_if : use

ref_if -u- ref_depl
ref_if -d- ref_opt
ref_if -- ref_node

ref_opt ..> sem : use

ref_depl ..> ref_node : use
ref_depl ..> ref_opt : use
ref_depl ..> depl_prep : use

ref_node ..> mon_if : use
ref_depl ..> mon_if : use
orch_impl ..> mon_if : use

torque_driver ..> Torque : use

orch_impl ..> os_driver : use
orch_impl ..> k8s_driver : use
orch_impl ..> torque_driver : use
orch_impl ..> depl_prep: use
orch_impl ..> image_reg: use

os_driver ..> OpenStack : use
k8s_driver ..> K8S : use

exp ...> OpenStack : use
exp ...> K8S : use
exp ...> Torque : use

ide ..> orch_if : use
ide ..> mon_if : use
@enduml
