@startuml

title WP5 - Runtime Layer Architecture Overview

skinparam fixCircleLabelOverlapping true 
skinparam defaultFontSize 20

[SODALITE\nIDE] as ide #PaleGreen
interface "SemanticReasonerAPI" as sem #PaleGreen

package "Orchestrator" as orch {
    component [Orchestrator] as orch_impl
    interface "OrchestratorAPI" as orch_if
    component [Openstack\nDriver] as os_driver
    component [K8S\nDriver] as k8s_driver
    component [PBS/Slurm\nDriver] as torque_driver
    component [OpenFaaS\nDriver] as faas_driver
    component [AWS\nDriver] as aws_driver
    orch_impl - orch_if
}

package "Monitoring" as mon {
    [Monitoring] as mon_impl
    () "MonitoringAPI" as mon_if
    [Dashboard] as dash
    () "GrafanaRegistryAPI" as grafana_if
    [Exporter] as exp
    () "ExporterAPI" as exp_if
    [Alert Manager] as alert_mngr
    () "AlertingAPI"  as alert_if
    [RuleFileServer] as rule_server
    () "AlertingRuleAPI" as alert_rule_if
    mon_impl -u- mon_if
    exp -u- exp_if
    alert_mngr -d- alert_if
    rule_server -u- alert_rule_if
    rule_server --( alert_if
    dash -u- grafana_if
}

package "Refactoring" as refactor {
    interface "RefactoringAPI" as ref_if
    interface "DiscoveringAPI" as dis_if
    interface "ManagementAPI" as mng_if
    component [Deployment Refactorer] as ref_depl
    component [Refactoring\nOption\nDiscoverer] as ref_opt
    component [Node Manager] as ref_node
    dis_if -d- ref_opt
    mng_if -d- ref_node
    ref_if - ref_depl
}

cloud {
    node OpenStack
    node Kubernetes as K8S
    node "PBS/Slurm" as PBS
    node OpenFaaS
    node AWS
}

'WP4 APIs
interface "Deployment\nPreparationAPI" as depl_prep #LightSalmon
interface "Image\nRegistryAPI" as image_reg #LightSalmon

'Security APIs
interface "IAM\nIntrospectionAPI" as IAMApi #LightSlateGrey
interface "SecretVaultAPI" as VaultAPI #LightSlateGrey



'Monitoring
mon_impl -u-( exp_if
dash --( mon_if
alert_mngr --( mon_if


'Refactoring
ref_opt --( ref_if
ref_node --( ref_if
ref_opt --( sem

ref_depl --( mng_if
ref_depl --( dis_if
ref_depl --( depl_prep

ref_node --( alert_if
ref_depl --( alert_if
ref_depl --( mon_if
orch_impl --( alert_if


orch_impl --> os_driver : use
orch_impl --> k8s_driver : use
orch_impl --> torque_driver : use
orch_impl --> aws_driver : use
orch_impl --> faas_driver : use

orch_impl -u-( depl_prep
orch_impl -u-( image_reg
orch_impl -u-( IAMApi
orch_impl -u-( VaultAPI

os_driver ..> OpenStack : use
k8s_driver ..> K8S : use
faas_driver ..> OpenFaaS : use
aws_driver ..> AWS : use
torque_driver ..> PBS : use

exp .d.> OpenStack : use
exp .d.> K8S : use
exp .d.> PBS : use
exp .d.> OpenFaaS : use
exp .d.> AWS : use

ide --( orch_if : use
ide --( grafana_if : use
ide --( alert_rule_if : use
ide --( ref_if : use
@enduml
