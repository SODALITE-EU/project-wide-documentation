@startuml
title Generate IaC (WP4)

'Define user actors
actor "Application Ops Expert"  as AppOpsExp
participant "SODALITE\nIDE" as IDE
participant "AbstractModel\nParser" as SAPC
participant "IaC Blueprint\nBuilder" as SBBC
participant "Application\nOptimiser\nMODAK" as SPOC
participant "IaC Verifier" as iacv
participant "Orchestrator\nAPI" as orch

AppOpsExp->IDE: BuildIaCRequest(model)

activate IDE

IDE->SAPC: BuildIaCRequest(model)

activate SAPC
'prepare a workable node list of the model  - flatten the relationship three
SAPC->SAPC: GetNodeList(Model)

'Main loop - go through the abstract nodes list
loop Node in NodeList


    opt "Static optimization" Node requires optimization
        SAPC->SPOC: StartOptimization(Node.optimizationInfo)
        activate SPOC
        SPOC-->SAPC: ExecutionContainer, ExecutionScript
        deactivate SPOC
        SAPC->SAPC: UpdateNodeWithOptimizationOutcome\n(Node, ExecutionContainer,\nExecutionScript)
    end

end
SAPC->SBBC: GenerateIaCCode(NodeList)
activate SBBC
SBBC->SBBC: CreateIaCCode()
SBBC --> iacv: verify (IaC, Correctness Criteria)
alt Parse and Model Building Errors
    iacv --> SBBC: Parse and Model\nBuilding Errors
    SBBC --> SAPC: Parse and Model\nBuilding Errors
    SAPC --> IDE: Parse and Model\nBuilding Errors
else  Parse and Model Building Success
    SBBC->orch: RegisterIaC(IaCCode)
    orch-->SBBC: IaCCodeReference
    SBBC-->SAPC: IaCCodeReference

deactivate SBBC

'Return the reference to compile time information - (eg errors, warnings, information, improvement suggestions - all adressing the abstract model
SAPC-->IDE: IaCCodeReference
end
deactivate SAPC

IDE-->AppOpsExp: IaCBuilderResponse\n(IaCCodeReference)
deactivate IDE

@enduml
